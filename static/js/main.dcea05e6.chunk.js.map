{"version":3,"sources":["components/DisplayChat/DisplayChat.module.css","components/DisplayAllContacts/DisplayAllContacts.module.css","components/DisplayChat/DisplayChatCloud/DisplayChatCloud.module.css","App.module.css","components/AllConvos/SearchConvo/SearchConvo.module.css","components/ChatTabs/EachChatTab/EachChatTab.module.css","components/ChatTabs/ChatTabs.module.css","components/AllConvos/AddNewConvo/AddNewConvo.module.css","components/AllConvos/AllConvos.module.css","components/UI/DefaultScreen.module.css","components/UI/LoadingSpinner.module.css","components/AllConvos/SearchConvo/SearchConvo.js","components/ChatTabs/EachChatTab/EachChatTab.js","store/index.js","components/ChatTabs/ChatTabs.js","components/AllConvos/AddNewConvo/AddNewConvo.js","components/AllConvos/AllConvos.js","components/UI/DefaultScreen.js","components/nonJSFunctions/ConvertTime.js","components/DisplayChat/DisplayChatCloud/DisplayChatCloud.js","components/DisplayChat/DisplayChat.js","components/UI/LoadingSpinner.js","components/DisplayAllContacts/DisplayAllContacts.js","components/LoadData/LoadData.js","App.js","index.js"],"names":["module","exports","SearchConvo","props","className","classes","search","type","placeholder","style","fontFamily","onChange","onSearch","bind","EachChatTab","common","src","data","dp","alt","name","latest","dataSlice","createSlice","initialState","chatdata","allContacts","id","messages","username","reducers","databaseDataSet","state","action","length","payload","obtainedData","updateChatData","index","findIndex","eachChat","changeTo","push","fromUser","text","time","late","console","log","substring","padEnd","initializeNewChat","chatToAdd","removeEmptyChat","filter","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","reducer","dataActions","actions","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ChatTabs","useSelector","params","useParams","dispatch","useDispatch","history","useHistory","useEffect","noUseChatData","eachData","location","pathname","includes","eachChatTab","eachConvo","toLowerCase","searchFor","map","to","onClick","close","isActive","active","textDecoration","color","backgroundColor","textAlign","AddNewConvo","convo_button","styles","bmItem","display","transition","bmItemHover","bmBurgerButton","position","width","height","left","top","bmBurgerBars","background","zIndex","bmCrossButton","bmCross","bmMenu","padding","fontSize","bmMorphShape","fill","bmItemList","bmOverlay","AllConvos","useState","openItIs","setOpen","closeSideBar","searchedConvo","setSearchedConvo","isOpen","onStateChange","handleStateChange","window","innerWidth","chat_container","event","target","value","DefaultScreen","default_screen","monthNames","ConvertTime","properDate","Date","now","hours","getHours","minutes","getMinutes","date","padStart","getDate","getMonth","getFullYear","DisplayChatCloud","common_to_cloud","messageData","div_align_right","urlForDP","messageFrom","DisplayChat","allChatData","enteredText","setEnteredText","requiredChat","eachContact","obtainChatCloud","maxHeight","eachMessage","container","details_of_chat","chats","onSubmit","preventDefault","LoadingSpinner","spinner","DisplayAllContacts","isLoading","setIsLoading","obtainAllContactLinks","setAllContactLinks","nav_bar","area_for_chat","LoadData","fetchChatDataFromFirebase","useCallback","a","fetch","response","json","result","allKeys","Object","keys","App","path","exact","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.dcea05e6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DisplayChat_container__3Se92\",\"details_of_chat\":\"DisplayChat_details_of_chat__20gjN\",\"chats\":\"DisplayChat_chats__CEDUL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DisplayAllContacts_container__1BLvM\",\"nav_bar\":\"DisplayAllContacts_nav_bar__1Rd-D\",\"area_for_chat\":\"DisplayAllContacts_area_for_chat__1Q7zE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"div_align_right\":\"DisplayChatCloud_div_align_right__240Th\",\"common_to_cloud\":\"DisplayChatCloud_common_to_cloud__181zV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1BS_Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"SearchConvo_search__FXx33\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"common\":\"EachChatTab_common__2aNzx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"ChatTabs_active__t9Wwy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"convo_button\":\"AddNewConvo_convo_button__2nIlO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat_container\":\"AllConvos_chat_container__3HZWN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default_screen\":\"DefaultScreen_default_screen__3JUZX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"LoadingSpinner_spinner__3EyPC\"};","import classes from './SearchConvo.module.css';\r\n\r\n// component to display the search input and getting the search query.\r\n\r\nconst SearchConvo = (props) => {\r\n\r\n    return <input className={classes.search} type=\"text\" placeholder=\"&#xf002; Search for conversation\" style={{ fontFamily: \"Arial, FontAwesome\" }} onChange={props.onSearch.bind(this)} />\r\n}\r\n\r\n\r\nexport default SearchConvo;","import classes from './EachChatTab.module.css';\r\n\r\n// The component is responsible for rendering each and every chat tab.\r\n\r\nconst EachChatTab = (props) => {\r\n    return (\r\n        <div className={classes.common}>\r\n            <img src={props.data.dp} alt=\"dp\" />\r\n            <div>\r\n                <h3>{props.data.name}</h3>\r\n                <span>{props.data.latest}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EachChatTab;","\r\nimport { createSlice, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n    persistStore, persistReducer, FLUSH, REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\n\r\nlet initialState = {\r\n    chatdata: [],\r\n    allContacts: [\r\n        {\r\n            dp: \"https://lumiere-a.akamaihd.net/v1/images/open-uri20160811-32147-cd72yq_7d7c172f.jpeg?region=0%2C0%2C600%2C600\",\r\n            id: 1,\r\n            latest: \"I hate anime\",\r\n            messages: [],\r\n            name: \"Leanne Graham\",\r\n            username: \"leanne\"\r\n        },\r\n        {\r\n            dp: \"https://ae01.alicdn.com/kf/HTB12HwKBLiSBuNkSnhJq6zDcpXat/Full-Diamond-Painting-Pikachu-Wearing-Hat-Diamond-Mosaic-Diamond-Drawing-Square-Diamond-Embroidery-Cross-Stitch-Decoration.jpg_Q90.jpg_.webp\",\r\n            id: 2,\r\n            latest: \"Ash is the worst trainer\",\r\n            messages: [],\r\n            name: \"Ervin Howell\",\r\n            username: \"ervin\"\r\n        },\r\n        {\r\n            dp: \"https://qph.fs.quoracdn.net/main-qimg-79f170951f7edb01470230af0f73ff23-pjlq\",\r\n            id: 3,\r\n            latest: \"I thought I was the God\",\r\n            messages: [],\r\n            name: \"Madara Uchiha\",\r\n            username: \"notObito\"\r\n        },\r\n        {\r\n            dp: \"https://w0.peakpx.com/wallpaper/670/410/HD-wallpaper-light-yagami-art-facial-expression-anime-deathnote-anime-deathnote-deathnote-l-kira.jpg\",\r\n            id: 4,\r\n            latest: \"I have a note-book\",\r\n            messages: [],\r\n            name: \"Light Yagami\",\r\n            username: \"kira\"\r\n        },\r\n        {\r\n            dp: \"https://www.hola.com/us/images/0268-11fe68838026-bf4ca2a78607-1000/horizontal-1200/daniel-craig-in-39-knives-out-39-.jpg\",\r\n            id: 5,\r\n            latest: \"It is not a Donut Hole at all but a smaller donut with its own hole.\",\r\n            messages: [],\r\n            name: \"Benoit Blanc\",\r\n            username: \"notTheBestDetective\"\r\n        },\r\n        {\r\n            dp: \"https://pbs.twimg.com/profile_images/1190831929211457536/9x6L3cg6_400x400.jpg\",\r\n            id: 6,\r\n            latest: \"You ridiculous bureaucrats will not dictate how my story ends!\",\r\n            messages: [],\r\n            name: \"God of Mischief\",\r\n            username: \"Loki\"\r\n        },\r\n        {\r\n            dp: \"https://i.pinimg.com/736x/65/0e/e6/650ee6bf521a33488387c5ebaa135de1--gotham-city-dark-knight.jpg\",\r\n            id: 7,\r\n            latest: \"I'm not wearing hockey pads!\",\r\n            messages: [],\r\n            name: \"Batman\",\r\n            username: \"theDarkKnight\"\r\n        },\r\n        {\r\n            dp: \"https://images.news18.com/ibnlive/uploads/2021/09/cristiano-ronaldo-5.jpg\",\r\n            id: 8,\r\n            latest: \"Siiii!!!!!!\",\r\n            messages: [],\r\n            name: \"Cristiano\",\r\n            username: \"cr7\"\r\n        },\r\n        {\r\n            dp: \"https://pbs.twimg.com/profile_images/1162020875752943616/IXAYdrua_400x400.jpg\",\r\n            id: 9,\r\n            latest: \"It's difficult to play against 21 players.\",\r\n            messages: [],\r\n            name: \"David De Gea\",\r\n            username: \"theWall\"\r\n        },\r\n        {\r\n            dp: \"https://i.guim.co.uk/img/media/0538b5e0f902e3e53e896c68b7af2723b7498a86/376_168_2029_1218/master/2029.jpg?width=1200&height=1200&quality=85&auto=format&fit=crop&s=fde5ea3f2a693f8abc071bf6a9d54c1f\",\r\n            id: 10,\r\n            latest: \"I'll kill them all if they don't obey me.\",\r\n            messages: [],\r\n            name: \"Ralf Rangnick\",\r\n            username: \"godOfGegenpress\"\r\n        },\r\n        {\r\n            dp: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSBHbtmMf5WpfspPDwsic2_TcLnN4GOnDcYpA&usqp=CAU\",\r\n            id: 11,\r\n            latest: \"I am Groot!\",\r\n            messages: [],\r\n            name: \"I am Groot\",\r\n            username: \"iAmGroot\"\r\n        },\r\n        {\r\n            dp: \"https://i1.sndcdn.com/artworks-000280481291-t8c1dc-t500x500.jpg\",\r\n            id: 12,\r\n            latest: \"I can go one step further\",\r\n            messages: [],\r\n            name: \"Son Goku\",\r\n            username: \"kakarot\"\r\n        }]\r\n};\r\n\r\n// Creating a slice using redux toolkit\r\n\r\nconst dataSlice = createSlice({\r\n    name: 'everyData',\r\n    initialState,\r\n    reducers: {\r\n        databaseDataSet(state, action) {\r\n            if (state.chatdata.length === 0) {\r\n                state.chatdata = action.payload.obtainedData;\r\n            }\r\n        },\r\n        updateChatData(state, action) {\r\n            const index = state.chatdata.findIndex(eachChat => {\r\n                return (eachChat.username === action.payload.changeTo);\r\n            });\r\n\r\n            state.chatdata[index].messages.push({\r\n                fromUser: true,\r\n                text: action.payload.text,\r\n                time: action.payload.time\r\n            });\r\n\r\n            let late = action.payload.text;\r\n            if (late.length > 15) {\r\n                console.log(\"this didnt trigger?\");\r\n                late = late.substring(0, 10);\r\n                late = late.padEnd(15, '.');\r\n            }\r\n\r\n            state.chatdata[index].latest = late;\r\n        },\r\n        initializeNewChat(state, action) {\r\n            const updateChatData = state.chatdata;\r\n            updateChatData.push(action.payload.chatToAdd[0]);\r\n            state.chatdata = updateChatData;\r\n        },\r\n        removeEmptyChat(state) {\r\n            const updateChatData = state.chatdata.filter(eachChat => {\r\n                return eachChat.messages.length !== 0;\r\n            })\r\n            state.chatdata = updateChatData;\r\n        },\r\n    }\r\n});\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: [\"dataSlice.reducer\"]\r\n}\r\n\r\n// The below line is responsible for data persistance. That is, the data is retrieved even after page reload or unload\r\n\r\nconst persistedReducer = persistReducer(persistConfig, dataSlice.reducer);\r\n\r\nexport const dataActions = dataSlice.actions;\r\n\r\n\r\nlet store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware: getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n})\r\nlet persistor = persistStore(store)\r\n\r\nexport { store, persistor };","import { NavLink } from \"react-router-dom\";\r\nimport EachChatTab from \"./EachChatTab/EachChatTab\";\r\n\r\nimport classes from './ChatTabs.module.css';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useEffect } from \"react\";\r\n\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { dataActions } from '../../store/index.js';\r\n\r\n// This component renders the link to display each tab\r\n\r\nconst ChatTabs = (props) => {\r\n\r\n    let data = useSelector(state => state.chatdata);\r\n    const params = useParams();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        let noUseChatData = data.filter(eachData => {\r\n            return eachData.messages.length === 0;\r\n        });\r\n        if (noUseChatData.length === 0) {\r\n            return;\r\n        }\r\n        if (!history.location.pathname.includes(noUseChatData[0].username)) {\r\n            dispatch(dataActions.removeEmptyChat());\r\n        }\r\n\r\n    }, [data, dispatch, history.location.pathname, params.username]);\r\n\r\n    let eachChatTab = data.filter(eachConvo => eachConvo.name.toLowerCase().includes(props.searchFor.toLowerCase())\r\n    ).map(eachConvo => {\r\n        return <NavLink key={`index${eachConvo.id}`} to={`/chat/${eachConvo.username}`} onClick={props.close} className={isActive => {\r\n            return isActive ? `${classes.active}` : \"\";\r\n        }\r\n        } style={{\r\n            textDecoration: 'none', color: 'white', backgroundColor: '#003153'\r\n        }} > <EachChatTab data={eachConvo} /></NavLink >\r\n    });\r\n\r\n    return <div>\r\n        {eachChatTab.length > 0 && eachChatTab}\r\n        {eachChatTab.length === 0 && <div style={{ textAlign: 'center' }}><h3>No chats to Load.</h3> Start a new conversation!</div>}\r\n    </div>\r\n\r\n}\r\n\r\nexport default ChatTabs;","import { Link } from \"react-router-dom\";\r\nimport classes from './AddNewConvo.module.css';\r\n\r\n// Component for the button that opens the contact list when we want to start a new conversation.\r\n\r\nconst AddNewConvo = (props) => {\r\n    return (\r\n        <Link to={'/newchat'} onClick={props.close}>\r\n            <button className={classes.convo_button}>Start New Conversation ➕</button>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default AddNewConvo;","import { useState } from 'react';\r\nimport { slide as Menu } from 'react-burger-menu';\r\nimport SearchConvo from './SearchConvo/SearchConvo';\r\nimport ChatTabs from '../ChatTabs/ChatTabs';\r\nimport AddNewConvo from './AddNewConvo/AddNewConvo';\r\nimport classes from './AllConvos.module.css';\r\n\r\n// The below styles field is defined in order to set the styling for the side bar.\r\n\r\n\r\nconst styles = {\r\n    /* Individual item */\r\n    bmItem: {\r\n        display: 'inline-block',\r\n\r\n        /* Our sidebar item styling */\r\n        textDecoration: 'none',\r\n        /* margin-bottom: 10px; */\r\n        color: '#d1d1d1',\r\n        transition: 'color 0.2s',\r\n    },\r\n\r\n    /* Change color on hover */\r\n    bmItemHover: {\r\n        color: 'white',\r\n    },\r\n\r\n    /* The rest copied directly from react-burger-menu docs */\r\n\r\n    /* Position and sizing of burger button */\r\n    bmBurgerButton: {\r\n        position: 'fixed',\r\n        width: '30px',\r\n        height: '25px',\r\n        left: '30px',\r\n        top: '10px',\r\n    },\r\n\r\n    /* Color/shape of burger icon bars */\r\n    bmBurgerBars: {\r\n        background: 'white',\r\n        zIndex: '2',\r\n    },\r\n\r\n    /* Position and sizing of clickable cross button */\r\n    bmCrossButton: {\r\n        height: '30px',\r\n        width: '30px',\r\n    },\r\n\r\n    /* Color/shape of close button cross */\r\n    bmCross: {\r\n        background: '#bdc3c7',\r\n    },\r\n\r\n    /* General sidebar styles */\r\n    bmMenu: {\r\n        background: '#373a47',\r\n        padding: '50px 0',\r\n        fontSize: '1.15em',\r\n    },\r\n    /* Morph shape necessary with bubble or elastic */\r\n    bmMorphShape: {\r\n        fill: '#373a47',\r\n    },\r\n\r\n    /* Wrapper for item list */\r\n    bmItemList: {\r\n        color: '#b8b7ad',\r\n    },\r\n\r\n    /* Styling of overlay */\r\n    bmOverlay: {\r\n        background: 'rgba(0, 0, 0, 0.3)',\r\n    },\r\n}\r\n\r\n// The component is responsible for handling the search query and displays the contents needed to be displayed in the side-bar\r\n\r\nconst AllConvos = () => {\r\n\r\n    const [openItIs, setOpen] = useState(false);\r\n\r\n    const handleStateChange = (state) => {\r\n        setOpen(state.isOpen);\r\n    }\r\n\r\n    const closeSideBar = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const [searchedConvo, setSearchedConvo] = useState('');\r\n\r\n    const searchHandler = (event) => {\r\n        setSearchedConvo(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <Menu isOpen={openItIs} onStateChange={(state) => handleStateChange(state)} width={window.innerWidth <= 600 ? '100%' : '300px'} styles={styles}\r\n        >\r\n            <div className={classes.chat_container}>\r\n                <SearchConvo onSearch={searchHandler} />\r\n                <AddNewConvo close={closeSideBar} />\r\n                <ChatTabs searchFor={searchedConvo} close={closeSideBar} />\r\n            </div>\r\n        </Menu >\r\n    )\r\n}\r\n\r\nexport default AllConvos;","import classes from './DefaultScreen.module.css';\r\n\r\n// The default message when we are at the home page\r\n\r\nconst DefaultScreen = () => {\r\n    return <div className={classes.default_screen}>\r\n        <h1>Select a conversation to view</h1>\r\n    </div>\r\n}\r\n\r\nexport default DefaultScreen;","// THe below JS function obtains the time format based on when the text was sent\r\n\r\n\r\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n];\r\n\r\nconst ConvertTime = (time) => {\r\n    let properDate = new Date(time);\r\n    let now = new Date(Date.now());\r\n    let hours = `${properDate.getHours()}`;\r\n    let minutes = `${properDate.getMinutes()}`;\r\n    let date = `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;\r\n    if (properDate.getDate() !== now.getDate() || properDate.getMonth() !== now.getMonth() || properDate.getFullYear() !== now.getFullYear()) {\r\n        date = date + `, ${properDate.getDate()} ${monthNames[properDate.getMonth()]}, ${properDate.getFullYear()}`\r\n    }\r\n    return date;\r\n}\r\n\r\nexport default ConvertTime;","import classes from './DisplayChatCloud.module.css';\r\n\r\nimport ConvertTime from '../../nonJSFunctions/ConvertTime';\r\n\r\n// The DisplayChat component uses this component to obtain chat cloud for each response\r\n\r\nconst DisplayChatCloud = (props) => {\r\n    // console.log(props.messageData);\r\n    return (\r\n        <div className={`${classes.common_to_cloud} ${props.messageData.fromUser ? classes.div_align_right : \"\"}`} >\r\n            <p>\r\n                {props.messageData.text}\r\n            </p>\r\n            <h5>\r\n                <span>\r\n                    {!props.messageData.fromUser && <img src={props.urlForDP} alt=\"dp\" />}\r\n                    <span>\r\n                        {props.messageData.fromUser ? \"You\" : props.messageFrom}\r\n                    </span>\r\n                </span>\r\n                <span>\r\n                    {ConvertTime(props.messageData.time)}\r\n                </span>\r\n            </h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayChatCloud;","import { useEffect, useState } from 'react';\r\n\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport DisplayChatCloud from './DisplayChatCloud/DisplayChatCloud';\r\n\r\nimport classes from './DisplayChat.module.css';\r\n\r\nimport ReactScrollableFeed from 'react-scrollable-feed';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { dataActions } from '../../store/index.js';\r\n\r\n// This component renders the chat for a particular contact\r\n\r\nconst DisplayChat = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const allChatData = useSelector(state => state.chatdata);\r\n\r\n    const allContacts = useSelector(state => state.allContacts);\r\n\r\n    const params = useParams();\r\n\r\n    const [enteredText, setEnteredText] = useState('');\r\n\r\n    const requiredChat = allChatData.filter(eachChat => {\r\n        return eachChat.username === params.username;\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (requiredChat.length === 0) {\r\n            dispatch(dataActions.initializeNewChat({\r\n                chatToAdd: allContacts.filter(eachContact => {\r\n                    return eachContact.username === params.username;\r\n                }),\r\n            }));\r\n        }\r\n    }, [allContacts, dispatch, params.username, requiredChat.length]);\r\n\r\n    const obtainChatCloud = requiredChat.length === 0 ? \"Kuch nahi hai\" : <ReactScrollableFeed style={{\r\n        height: '100% !important',\r\n        maxHeight: '100% !important'\r\n    }}> {\r\n            requiredChat[0].messages.map((eachMessage, index) => {\r\n                return (\r\n                    <DisplayChatCloud key={`message${index}`} messageData={eachMessage} messageFrom={requiredChat[0].username} urlForDP={requiredChat[0].dp} />\r\n                );\r\n            })\r\n        } </ReactScrollableFeed >;\r\n\r\n    // The below 2 functions are required to handle text-sending from the user's end\r\n\r\n    const saveEnteredTextHandler = (event) => {\r\n        setEnteredText(event.target.value);\r\n    };\r\n\r\n    const addNewTextHandler = (event) => {\r\n        event.preventDefault();\r\n        if (enteredText === '') {\r\n            return;\r\n        }\r\n        dispatch(dataActions.updateChatData({\r\n            changeTo: params.username,\r\n            text: enteredText,\r\n            time: Date.now(),\r\n        }));\r\n        setEnteredText('');\r\n        history.push(`/chat/${params.username}`);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            {requiredChat.length !== 0 &&\r\n                <div className={classes.details_of_chat}>\r\n                    <img src={requiredChat[0].dp} alt=\"dp\" />\r\n                    <h4>{requiredChat[0].name}</h4>\r\n                </div>\r\n            }\r\n            <div className={classes.chats}>\r\n                {requiredChat.length !== 0 && obtainChatCloud}\r\n            </div>\r\n            <form onSubmit={addNewTextHandler.bind(this)}>\r\n                <input type=\"text\" onChange={saveEnteredTextHandler.bind(this)} value={enteredText} />\r\n                <button type=\"submit\"><i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i></button>\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default DisplayChat;","import classes from './LoadingSpinner.module.css';\n\n// When we are loading data from the server, it often takes time. This component is rendered when the data is loading\n\nconst LoadingSpinner = () => {\n  return <div className={classes.spinner}></div>;\n}\n\nexport default LoadingSpinner;\n","import { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport EachChatTab from '../ChatTabs/EachChatTab/EachChatTab';\r\n\r\nimport classes from './DisplayAllContacts.module.css';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\n\r\n// This component renders the contact list\r\n\r\nconst DisplayAllContacts = () => {\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const allContacts = useSelector(state => {\r\n        return state.allContacts;\r\n    });\r\n\r\n    const [obtainAllContactLinks, setAllContactLinks] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setAllContactLinks(allContacts.map((eachConvo, index) => {\r\n            if (allContacts.length !== 0 && index === (allContacts.length - 1)) {\r\n                setIsLoading(false);\r\n            }\r\n            return <Link key={`index${eachConvo.id}`} to={`/chat/${eachConvo.username}`} style={{\r\n                color: 'white',\r\n                textDecoration: 'none',\r\n            }} ><EachChatTab data={eachConvo} /></Link>;\r\n        }));\r\n    }, [allContacts]);\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.nav_bar}>\r\n            </div>\r\n            {\r\n                isLoading && <LoadingSpinner />\r\n            }\r\n            {!isLoading && <div className={classes.area_for_chat}>\r\n                {obtainAllContactLinks}\r\n            </div>}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DisplayAllContacts;","import { useDispatch } from \"react-redux\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { dataActions } from \"../../store\";\r\n\r\n// The below component doesn't render anything. Simply obtains data from the server, i.e. the firebase\r\nconst LoadData = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const fetchChatDataFromFirebase = useCallback(\r\n        async () => {\r\n            try {\r\n                const response = await fetch('https://chatapi-b173c-default-rtdb.asia-southeast1.firebasedatabase.app/chathistory.json');\r\n                const result = await response.json();\r\n                const allKeys = Object.keys(result);\r\n                dispatch(dataActions.databaseDataSet({\r\n                    obtainedData: result[allKeys[0]],\r\n                }));\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }, [dispatch]\r\n    )\r\n\r\n    useEffect(() => {\r\n        fetchChatDataFromFirebase()\r\n    }, [fetchChatDataFromFirebase]);\r\n}\r\n\r\nexport default LoadData;","import { Route, Switch } from 'react-router-dom';\n\nimport classes from './App.module.css';\nimport AllConvos from './components/AllConvos/AllConvos';\nimport DefaultScreen from './components/UI/DefaultScreen';\n\nimport DisplayChat from './components/DisplayChat/DisplayChat';\n\nimport DisplayAllContacts from './components/DisplayAllContacts/DisplayAllContacts';\n\nimport LoadData from './components/LoadData/LoadData';\n\n// This is the main component which displays data based upon the url, using React Router \n\nfunction App() {\n\n  LoadData();\n\n  return (\n    <div className={classes.container}>\n      <AllConvos />\n      <Switch>\n        <Route path='/' exact>\n          <DefaultScreen />\n        </Route>\n        <Route path='/home' exact>\n          <DefaultScreen />\n        </Route>\n        <Route path='/chat/:username'>\n          <DisplayChat />\n        </Route>\n        <Route path='/newchat'>\n          <DisplayAllContacts />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './store/index';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n// BrowserRouter is required to provide the router services to all the child components\n\n// PersistGate is required to provide persisted data to the child components\n\nReactDOM.render(<HashRouter><Provider store={store}><PersistGate loading={null} persistor={persistor}><App /></PersistGate></Provider></HashRouter>, document.getElementById('root'));\n"],"sourceRoot":""}